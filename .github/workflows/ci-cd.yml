name: Azure Teams AI Chatbot CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  PYTHON_VERSION: '3.11'
  AZURE_WEBAPP_PACKAGE_PATH: '.'

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8
    
    - name: Run linting
      run: |
        echo "Running flake8..."
        flake8 src/ app.py --max-line-length=100 --exclude=__pycache__
        
        echo "Running black check..."
        black --check src/ app.py
    
    - name: Run tests
      run: |
        echo "Running pytest..."
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
      continue-on-error: true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Create deployment package
      run: |
        echo "Creating deployment package..."
        mkdir -p deployment-package
        cp -r src/ deployment-package/
        cp app.py requirements.txt README.md deployment-package/
        
        # Create startup script
        cat > deployment-package/startup.sh << 'EOF'
        #!/bin/bash
        export PORT=${PORT:-8000}
        pip install -r requirements.txt
        gunicorn --bind 0.0.0.0:$PORT --workers 1 --timeout 120 --preload app:app
        EOF
        chmod +x deployment-package/startup.sh
    
    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment-package/
        retention-days: 30

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package
        path: ./deployment-package
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}
    
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME_DEV }}
        package: ./deployment-package
        startup-command: 'startup.sh'
    
    - name: Test deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        
        HEALTH_URL="https://${{ secrets.AZURE_WEBAPP_NAME_DEV }}.azurewebsites.net/health"
        echo "Testing health endpoint: $HEALTH_URL"
        
        for i in {1..5}; do
          if curl -s -f "$HEALTH_URL"; then
            echo "✅ Health check passed"
            break
          else
            echo "⏳ Health check attempt $i/5 failed, retrying..."
            sleep 10
          fi
        done

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package
        path: ./deployment-package
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}
    
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME_STAGING }}
        package: ./deployment-package
        startup-command: 'startup.sh'
    
    - name: Test deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        
        HEALTH_URL="https://${{ secrets.AZURE_WEBAPP_NAME_STAGING }}.azurewebsites.net/health"
        echo "Testing health endpoint: $HEALTH_URL"
        
        for i in {1..5}; do
          if curl -s -f "$HEALTH_URL"; then
            echo "✅ Health check passed"
            break
          else
            echo "⏳ Health check attempt $i/5 failed, retrying..."
            sleep 10
          fi
        done

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: production
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package
        path: ./deployment-package
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}
    
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME_PROD }}
        package: ./deployment-package
        startup-command: 'startup.sh'
    
    - name: Test deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        
        HEALTH_URL="https://${{ secrets.AZURE_WEBAPP_NAME_PROD }}.azurewebsites.net/health"
        echo "Testing health endpoint: $HEALTH_URL"
        
        for i in {1..5}; do
          if curl -s -f "$HEALTH_URL"; then
            echo "✅ Health check passed"
            break
          else
            echo "⏳ Health check attempt $i/5 failed, retrying..."
            sleep 10
          fi
        done
    
    - name: Create GitHub Release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from GitHub Actions
          
          **Changes in this release:**
          - Deployed to production environment
          - Build #${{ github.run_number }}
          - Commit: ${{ github.sha }}
        draft: false
        prerelease: false